// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AdminType {
  SUPREME
  DIRECTOR
  COORDINATOR
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role       @default(STUDENT)
  adminType      AdminType?
  class          String?
  grade          String?
  subject        String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]
  chatMessages  ChatMessage[]
  notifications Notification[]
  materials     Material[]
  grades        Grade[]
  tasks         Task[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelos para o chatbot
model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("Nova conversa")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id           String   @id @default(cuid())
  sessionId    String
  userId       String
  role         String   @default("user") // "user" ou "assistant"
  content      String   @db.Text
  createdAt    DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Modelos para o portal
model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  isRead      Boolean  @default(false)
  teacherName String?
  date        String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Material {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String   @db.Text
  subject     String
  fileUrl     String
  uploadDate  String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("materials")
}

model Grade {
  id       String @id @default(cuid())
  userId   String
  subject  String
  value    Float
  term     String
  date     String
  comments String @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("grades")
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String   @db.Text
  dueDate     String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

// Modelo para arquivos
model File {
  id          String   @id @default(cuid())
  url         String   @unique
  filename    String
  contentType String
  size        Int
  uploadedBy  String
  category    String?
  description String?
  type        String
  createdAt   DateTime @default(now())

  @@map("files")
}
