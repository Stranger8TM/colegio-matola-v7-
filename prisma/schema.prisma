// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  password     String
  name         String
  email        String    @unique
  profileImage String?
  class        String
  grade        String
  role         String    @default("student")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  tasks           Task[]
  notifications   Notification[]
  grades          Grade[]
  lessonProgress  LessonProgress[]
}

model Teacher {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  profileImage String?
  subject      String
  bio          String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  materials       Material[]
  notifications   Notification[]
  grades          Grade[]
  recordedLessons RecordedLesson[]
}

model Material {
  id          String    @id @default(uuid())
  title       String
  description String?
  subject     String
  fileUrl     String
  classTarget String
  uploadDate  DateTime  @default(now())
  teacherId   String

  teacher     Teacher   @relation(fields: [teacherId], references: [id])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  completed   Boolean   @default(false)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
}

model Notification {
  id          String    @id @default(uuid())
  title       String
  content     String
  date        DateTime  @default(now())
  isRead      Boolean   @default(false)
  teacherId   String
  targetClass String?

  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  users       User[]
}

model Grade {
  id          String    @id @default(uuid())
  studentId   String
  teacherId   String
  subject     String
  value       Float
  term        String
  date        DateTime  @default(now())
  comments    String?

  student     User      @relation(fields: [studentId], references: [id])
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
}

model Course {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  date        DateTime
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          String    @id @default(uuid())
  title       String
  fileUrl     String
  fileType    String
  fileSize    Int
  uploadDate  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Statistic {
  id                String    @id @default(uuid())
  totalStudents     Int
  totalTeachers     Int
  totalCourses      Int
  activeClasses     Int
  pendingAdmissions Int
  monthlyRevenue    String
  updatedAt         DateTime  @updatedAt
}

model RecordedLesson {
  id           String    @id @default(uuid())
  title        String
  description  String?
  subject      String
  videoUrl     String
  thumbnailUrl String?
  duration     Float
  classTarget  String
  uploadDate   DateTime  @default(now())
  teacherId    String

  teacher      Teacher   @relation(fields: [teacherId], references: [id])
  progress     LessonProgress[]
}

model LessonProgress {
  userId      String
  lessonId    String
  progress    Float     @default(0)
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  lesson      RecordedLesson @relation(fields: [lessonId], references: [id])

  @@id([userId, lessonId])
}
